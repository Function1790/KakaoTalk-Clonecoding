<!DOCTYPE html>
<html lang="ko">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="/css/chat.css">
  <title>채팅방</title>
</head>

<body>

  <div class="chat-container">
    <div class="chat-header"><%= room.name %></div>
    <div class="chat-messages">
    </div>
    <div class="chat-input">
      <input type="text" name="message" id="message" placeholder="메시지 입력">
      <button id="send">전송</button>
    </div>
    <input type="hidden" id="roomid" value="<%= room.id %>" />
  </div>

</body>
<script>
  // Viewer
  const messageInput = document.getElementById('message');
  const sendBtn = document.getElementById('send');
  const chatArea = document.getElementsByClassName('chat-messages')[0];

  function addMessageBubble(message, mode) {
    chatArea.innerHTML += `
    <div class="message ${mode}-message">${message}</div>
    `
  }

  function onReceive(message) {
    addMessageBubble(message, 'receive');
  }
</script>
<script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
<script>
  // Socket
  const roomid = document.getElementById('roomid');
  const socket = io('http://localhost:3000');
  socket.emit('init',
    { message: document.cookie, roomid: roomid.value }
  );

  // 서버에서 메시지를 받으면 화면에 추가
  socket.on('message', (data) => {
    // Receive Data Interface: /src/websocket/room.ts
    console.log(data);
    if (data.from == 'me') return; // 보낸 사람이 자신일 경우
    else if (data.from == 'system') {
      addMessageBubble(data.message, 'system');
      return;
    } else {
      addMessageBubble(data.message, 'receive');
    }
  });

  sendBtn.onclick = () => {
    const message = messageInput.value;
    addMessageBubble(message, 'send');
    socket.emit('message', { message });
    messageInput.value = '';
  }
</script>

</html>